'''creating a class which has functions ,which returns the sum of adjacent and the sum of diagonals of a matrix'''
class neighborSum:
    def __init__(self, grid):
        self.grid=grid
    
    def adjacentSum(self, adjacent_value):
        adjacent_result=0 #the result will add in it
        row=len(self.grid) #length of row
        col=len(self.grid[0]) #length of column

        for r in range(row):
            for c in range(col):
                if adjacent_value==self.grid[r][c]:
                    if c>0:    #if the column_index of the given value is greater than the column_index of the adjacent integer;
                        adjacent_result+=self.grid[r][c-1]   #getting index of the adjacent integer and adding that integer in 'adjacent_result'.
                    if c<col-1:  #if the column_index of the given value is less than the column_index of the adjacent integer:
                        adjacent_result+=self.grid[r][c+1]
                    if r>0:  #if the row_index of the given value is greater than the row_index ofthe adjacent integer:
                        adjacent_result+=self.grid[r-1][c]
                    if r<row-1:  #if the row_index of the given value is less than the row_index of the adjacent integer:
                        adjacent_result+=self.grid[r+1][c]

        return adjacent_result
    
    def diagonalSum(self,diagonal_value):
        diagonal_result=0
        row=len(self.grid)
        col=len(self.grid[0])

        for r in range(row):
            for c in range(col):

                if diagonal_value==self.grid[r][c]:
                    if r>0 and c>0:
                        diagonal_result+=self.grid[r-1][c-1]
                    if r>0 and c<col-1:
                        diagonal_result+=self.grid[r-1][c+1]
                    if r<row-1 and c>0:
                        diagonal_result+=self.grid[r+1][c-1]
                    if r<row-1 and c<col-1:
                        diagonal_result+=self.grid[r+1][c+1]

        return diagonal_result

cls=neighborSum([[1,2,3],[4,5,6],[7,8,9]])  #grid must be 2d array

print(cls.adjacentSum(1),cls.diagonalSum(9))  #more values can be printed
